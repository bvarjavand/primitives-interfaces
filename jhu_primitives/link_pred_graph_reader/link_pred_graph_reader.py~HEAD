from networkx import Graph
import networkx as nx
import numpy as np
from typing import Sequence, TypeVar, Union, Dict
import os

from d3m.primitive_interfaces.transformer import TransformerPrimitiveBase
from d3m import container
from d3m import utils
from d3m.metadata import hyperparams, base as metadata_module, params
from d3m.primitive_interfaces import base
from d3m.primitive_interfaces.base import CallResult

Inputs = container.Dataset
Outputs = container.List

class Params(params.Params):
    pass

class Hyperparams(hyperparams.Hyperparams):
    #dim = hyperparams.Hyperparameter[None](default=None)
    dim = None

class LinkPredictionGraphReader(TransformerPrimitiveBase[Inputs, Outputs, Hyperparams]):
    # This should contain only metadata which cannot be automatically determined from the code.
    metadata = metadata_module.PrimitiveMetadata({
        # Simply an UUID generated once and fixed forever. Generated using "uuid.uuid4()".
        'id': '32fec24f-6861-4a4c-88f3-d4ec2bc1b486',
        'version': "0.1.0",
        'name': "jhu.lcc",
        # The same path the primitive is registered with entry points in setup.py.
        'python_path': 'd3m.primitives.data_transformation.graph_transformer.JHU',
        # Keywords do not have a controlled vocabulary. Authors can put here whatever they find suitable.
        'keywords': ['graph', 'link prediction'],
        'source': {
            'name': "JHU",
            'uris': [
                # Unstructured URIs. Link to file and link to repo in this case.
                'https://github.com/neurodata/primitives-interfaces/jhu_primitives/link_pred_graph_reader/link_pred_graph_reader.py',
#                'https://github.com/youngser/primitives-interfaces/blob/jp-devM1/jhu_primitives/ase/ase.py',
                'https://github.com/neurodata/primitives-interfaces.git',
            ],
            'contact': 'mailto:hhelm2@jhu.edu',
        },
        'description': 'Finds the largest connected component of a graph',
        # A list of dependencies in order. These can be Python packages, system packages, or Docker images.
        # Of course Python packages can also have their own dependencies, but sometimes it is necessary to
        # install a Python package first to be even able to run setup.py of another package. Or you have
        # a dependency which is not on PyPi.
        'installation': [
            {
            'type': 'UBUNTU',
            'package': 'r-base',
            'version': '3.4.2'
            },
            {
            'type': 'UBUNTU',
            'package': 'libxml2-dev',
            'version': '2.9.4'
            },
            {
            'type': 'UBUNTU',
            'package': 'libpcre3-dev',
            'version': '2.9.4'
            },
            {
            'type': 'PIP',
            'package_uri': 'git+https://github.com/neurodata/primitives-interfaces.git@{git_commit}#egg=jhu_primitives'.format(
                git_commit=utils.current_git_commit(os.path.dirname(__file__)),),
            },
            ],
        'algorithm_types': [
            #"BREADTH_FIRST_SEARCH"
            "NONOVERLAPPING_COMMUNITY_DETECTION"
        ],
        'primitive_family': "DATA_PREPROCESSING",
        'preconditions': ['NO_MISSING_VALUES']
    })

    def __init__(self, *, hyperparams: Hyperparams, random_seed: int = 0, docker_containers: Dict[str, base.DockerContainer] = None) -> None:
        super().__init__(hyperparams=hyperparams, random_seed=random_seed, docker_containers=docker_containers)

    def produce(self, *, inputs: Inputs, timeout: float = None, iterations: int = None) -> CallResult[Outputs]:
        """
        Input
            G: an n x n matrix or a networkx Graph 
        Return
            The largest connected component of g

        """
        G = inputs['0']
        csv = inputs['learningData']
        n = len(G)

        #if len(list(nx.get_node_attributes(G, 'nodeID').values())) == 0:
        #    nx.set_node_attributes(G,'nodeID',-1)
        #    for i in range(len(G)):
        #        G.node[i]['nodeID'] = i

        values = np.array(list(nx.get_edge_attributes(G, 'linkType').values()))
        keys = np.array(list(nx.get_edge_attributes(G, 'linkType').keys()))

        linktypes = np.array(csv['linkType'], dtype = 'int32')

        uniq_linktypes, n_i = np.unique(linktypes, return_counts = True)
        n_linktypes = len(uniq_linktypes)

        link_type_edges = [value == uniq_linktypes[i] for i in range(len(uniq_linktypes))]
        for i in range(n_linktypes):
            link_type_edges.append(values == uniq_linktypes[i])

        link_type_keys = [[] for i in range(n_linktypes)]
        for i in range(n_linktypes):
            for j in range(len(n)):
                if link_type_edges[i][j]:
                    link_


        ones = values == 1
        one_edges = []
        for i in range(len(values)):
            if ones[i]:
                one_edges.append(keys[i])

        G = nx.Graph()
        G.add_nodes_from(data['0'])
        for i in range(len(one_edges)):
            G.add_edge(one_edges[i][0], one_edges[i][1])
            G.add_edge(one_edges[i][1], one_edges[i][0])

        return base.CallResult(container.List([G_connected[0].copy(), nodeIDs, csv]))